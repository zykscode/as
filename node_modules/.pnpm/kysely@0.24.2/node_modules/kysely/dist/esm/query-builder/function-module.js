/// <reference types="./function-module.d.ts" />
import { ExpressionWrapper } from '../expression/expression-wrapper.js';
import { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';
import { FunctionNode } from '../operation-node/function-node.js';
import { parseSimpleReferenceExpression, parseReferenceExpressionOrList, } from '../parser/reference-parser.js';
import { parseSelectAll } from '../parser/select-parser.js';
import { AggregateFunctionBuilder } from './aggregate-function-builder.js';
export function createFunctionModule() {
    const fn = (name, args) => {
        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args)));
    };
    return Object.assign(fn, {
        avg(column) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('avg', parseSimpleReferenceExpression(column)),
            });
        },
        coalesce(value, ...otherValues) {
            return fn('coalesce', [value, ...otherValues]);
        },
        count(column) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSimpleReferenceExpression(column)),
            });
        },
        countAll(table) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)[0]),
            });
        },
        max(column) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('max', parseSimpleReferenceExpression(column)),
            });
        },
        min(column) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('min', parseSimpleReferenceExpression(column)),
            });
        },
        sum(column) {
            return new AggregateFunctionBuilder({
                aggregateFunctionNode: AggregateFunctionNode.create('sum', parseSimpleReferenceExpression(column)),
            });
        },
    });
}
