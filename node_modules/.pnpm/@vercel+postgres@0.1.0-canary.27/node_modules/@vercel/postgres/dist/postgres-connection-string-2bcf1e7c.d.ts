import { ClientConfig, PoolConfig, Client, QueryResultRow, QueryResult, Pool } from '@neondatabase/serverless';

declare type ConfigItemsToOmit = 'user' | 'database' | 'password' | 'host' | 'port';
declare type VercelPostgresClientConfig = Omit<ClientConfig, ConfigItemsToOmit>;
declare type VercelPostgresPoolConfig = Omit<PoolConfig, ConfigItemsToOmit>;

declare type Primitive = string | number | boolean | undefined | null;

declare class VercelClient extends Client {
    /**
     * A template literal tag providing safe, easy to use SQL parameterization.
     * Parameters are substituted using the underlying Postgres database, and so must follow
     * the rules of Postgres parameterization.
     * @example
     * ```ts
     * const pool = createClient();
     * const userId = 123;
     * await client.connect();
     * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;
     * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);
     * await client.end();
     * ```
     * @returns A promise that resolves to the query result.
     */
    sql<O extends QueryResultRow>(strings: TemplateStringsArray, ...values: Primitive[]): Promise<QueryResult<O>>;
}
declare function createClient(config?: VercelPostgresClientConfig): VercelClient;

declare class VercelPool extends Pool {
    /**
     * A template literal tag providing safe, easy to use SQL parameterization.
     * Parameters are substituted using the underlying Postgres database, and so must follow
     * the rules of Postgres parameterization.
     * @example
     * ```ts
     * const pool = createPool();
     * const userId = 123;
     * const result = await pool.sql`SELECT * FROM users WHERE id = ${userId}`;
     * // Equivalent to: await pool.query('SELECT * FROM users WHERE id = $1', [id]);
     * ```
     * @returns A promise that resolves to the query result.
     */
    sql<O extends QueryResultRow>(strings: TemplateStringsArray, ...values: Primitive[]): Promise<QueryResult<O>>;
}
declare function createPool(config?: VercelPostgresPoolConfig): VercelPool;

declare function sql<O extends QueryResultRow>(strings: TemplateStringsArray, ...values: Primitive[]): Promise<QueryResult<O>>;

declare type ConnectionStringType = 'pool' | 'direct';
declare function postgresConnectionString(type?: ConnectionStringType): string | undefined;

export { VercelClient as V, VercelPool as a, createPool as b, createClient as c, VercelPostgresClientConfig as d, VercelPostgresPoolConfig as e, postgresConnectionString as p, sql as s };
