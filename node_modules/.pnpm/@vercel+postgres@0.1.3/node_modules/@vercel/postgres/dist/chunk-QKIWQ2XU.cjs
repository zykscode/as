"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }var _serverless = require('@neondatabase/serverless');var n=class extends Error{constructor(t,o){super(`VercelPostgresError - '${t}': ${o}`);this.code=t;this.name="VercelPostgresError"}};function s(e="pool"){let r;switch(e){case"pool":{r=process.env.POSTGRES_URL;break}case"direct":{r=process.env.POSTGRES_URL_NON_POOLING;break}default:{let o=e;throw new n("invalid_connection_type",`Unhandled type: ${o}`)}}return r==="undefined"&&(r=void 0),r}function a(e){return e.includes("-pooler.")}function d(e){return!a(e)}function c(e,...r){let t="";for(let o=0;o<e.length;o++)t+=e[o],o<r.length&&(t+=`$${o+1}`);return[t,r]}var l=class extends _serverless.Client{async sql(r,...t){let[o,p]=c(r,...t);return this.query(o,p)}};function V(e){let r=_nullishCoalesce((e==null?void 0:e.connectionString), () => (s("direct")));if(!r)throw new n("missing_connection_string","You did not supply a 'connectionString' and no 'POSTGRES_URL_NON_POOLING' env var was found.");if(!d(r))throw new n("invalid_connection_string","This connection string is meant to be used with a pooled connection. Try `createPool()` instead.");return new l({...e,connectionString:r})}var m=class extends _serverless.Pool{constructor(){super(...arguments);this.Client=l}async sql(t,...o){let[p,g]=c(t,...o);return this.query(p,g)}connect(t){return super.connect(t)}};function u(e){let r=_nullishCoalesce((e==null?void 0:e.connectionString), () => (s("pool")));if(!r)throw new n("missing_connection_string","You did not supply a 'connectionString' and no 'POSTGRES_URL' env var was found.");if(!a(r))throw new n("invalid_connection_string","This connection string is meant to be used with a direct connection. Make sure to use a pooled connection string or try `createClient()` instead.");let t=e==null?void 0:e.maxUses;return typeof EdgeRuntime<"u"&&(t&&t!==1&&console.warn("@vercel/postgres: Overriding `maxUses` to 1 because the EdgeRuntime does not support client reuse."),t=1),new m({...e,connectionString:r,maxUses:t})}var i,f= exports.f =new Proxy(()=>{},{get(e,r){return i||(i=u()),Reflect.get(i,r)},apply(e,r,t){return i||(i=u()),i.sql(...t)}}),G= exports.g =f;exports.a = s; exports.b = l; exports.c = V; exports.d = m; exports.e = u; exports.f = f; exports.g = G;
